import FWCore.ParameterSet.Config as cms

def DTTrigPhase2Prod(**kwargs):
  mod = cms.EDProducer('DTTrigPhase2Prod',
    digiTag = cms.InputTag('CalibratedDigis'),
    timeTolerance = cms.int32(999999),
    tanPhiTh = cms.double(1),
    tanPhiThw2max = cms.double(1.3),
    tanPhiThw2min = cms.double(0.5),
    tanPhiThw1max = cms.double(0.9),
    tanPhiThw1min = cms.double(0.2),
    tanPhiThw0 = cms.double(0.5),
    chi2Th = cms.double(0.01),
    chi2corTh = cms.double(0.1),
    useBX_correlation = cms.bool(False),
    dT0_correlate_TP = cms.double(25),
    dBX_correlate_TP = cms.int32(0),
    dTanPsi_correlate_TP = cms.double(99999),
    clean_chi2_correlation = cms.bool(True),
    allow_confirmation = cms.bool(True),
    minx_match_2digis = cms.double(1),
    scenario = cms.int32(0),
    df_extended = cms.int32(0),
    co_option = cms.int32(0),
    co_quality = cms.int32(0),
    max_primitives = cms.int32(999),
    output_mixer = cms.bool(False),
    output_latpredictor = cms.bool(False),
    output_slfitter = cms.bool(False),
    output_slfilter = cms.bool(False),
    output_confirmed = cms.bool(False),
    output_matcher = cms.bool(False),
    ttrig_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/wire_rawId_ttrig.txt'),
    z_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/wire_rawId_z.txt'),
    lut_sl1 = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_sl1.dat'),
    lut_sl2 = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_slx.dat'),
    lut_sl3 = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_sl3.dat'),
    lut_2sl = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_2sl.dat'),
    shift_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/wire_rawId_x.txt'),
    maxdrift_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/drift_time_per_chamber.txt'),
    shift_theta_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/theta_shift.txt'),
    global_coords_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/global_coord_perp_x_phi0.txt'),
    laterality_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/lat_predictions.dat'),
    algo = cms.int32(0),
    minHits4Fit = cms.int32(3),
    splitPathPerSL = cms.bool(True),
    debug = cms.untracked.bool(False),
    dump = cms.untracked.bool(False),
    rpcRecHits = cms.InputTag('rpcRecHits'),
    useRPC = cms.bool(False),
    bx_window = cms.int32(1),
    phi_window = cms.double(50),
    max_quality_to_overwrite_t0 = cms.int32(9),
    storeAllRPCHits = cms.bool(False),
    activateBuffer = cms.bool(False),
    superCelltimewidth = cms.double(400),
    superCellspacewidth = cms.int32(20),
    HoughGrouping = cms.PSet(
      debug = cms.untracked.bool(False),
      angletan = cms.double(0.3),
      anglebinwidth = cms.double(1),
      posbinwidth = cms.double(2.1),
      maxdeltaAngDeg = cms.double(10),
      maxdeltaPos = cms.double(10),
      UpperNumber = cms.int32(6),
      LowerNumber = cms.int32(4),
      MaxDistanceToWire = cms.double(0.03),
      minNLayerHits = cms.int32(6),
      minSingleSLHitsMax = cms.int32(3),
      minSingleSLHitsMin = cms.int32(3),
      allowUncorrelatedPatterns = cms.bool(True),
      minUncorrelatedHits = cms.int32(3)
    ),
    PseudoBayesPattern = cms.PSet(
      pattern_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/PseudoBayesPatterns_uncorrelated_v0.root'),
      debug = cms.untracked.bool(False),
      minNLayerHits = cms.int32(3),
      minSingleSLHitsMax = cms.int32(3),
      minSingleSLHitsMin = cms.int32(0),
      allowedVariance = cms.int32(1),
      allowDuplicates = cms.bool(False),
      setLateralities = cms.bool(True),
      allowUncorrelatedPatterns = cms.bool(True),
      minUncorrelatedHits = cms.int32(3),
      saveOnPlace = cms.bool(True),
      maxPathsPerMatch = cms.int32(256)
    ),
    mightGet = cms.optional.untracked.vstring
  )
  for k,v in kwargs.items():
    setattr(mod, k, v)
  return mod
