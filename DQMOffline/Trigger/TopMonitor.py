import FWCore.ParameterSet.Config as cms

def TopMonitor(*args, **kwargs):
  mod = cms.EDProducer('TopMonitor',
    FolderName = cms.string('HLT/TOP'),
    requireValidHLTPaths = cms.bool(True),
    vertices = cms.InputTag('offlinePrimaryVertices'),
    muons = cms.InputTag('muons'),
    electrons = cms.InputTag('gedGsfElectrons'),
    elecID = cms.InputTag('egmGsfElectronIDsForDQM', 'cutBasedElectronID-RunIIIWinter22-V1-tight'),
    photons = cms.InputTag('photons'),
    jets = cms.InputTag('ak4PFJetsCHS'),
    btagAlgos = cms.VInputTag(
      'pfDeepCSVJetTags:probb',
      'pfDeepCSVJetTags:probbb'
    ),
    met = cms.InputTag('pfMet'),
    metSelection = cms.string('pt > 0'),
    jetSelection = cms.string('pt > 0'),
    eleSelection = cms.string('pt > 0'),
    muoSelection = cms.string('pt > 0'),
    phoSelection = cms.string('pt > 0'),
    HTdefinition = cms.string('pt > 0'),
    vertexSelection = cms.string('!isFake'),
    bjetSelection = cms.string('pt > 0'),
    njets = cms.uint32(0),
    nelectrons = cms.uint32(0),
    nmuons = cms.uint32(0),
    nphotons = cms.uint32(0),
    leptJetDeltaRmin = cms.double(0),
    bJetMuDeltaRmax = cms.double(9999),
    bJetDeltaEtaMax = cms.double(9999),
    HTcut = cms.double(0),
    nbjets = cms.uint32(0),
    workingpoint = cms.double(0.4941),
    applyLeptonPVcuts = cms.bool(False),
    invMassUppercut = cms.double(-1),
    invMassLowercut = cms.double(-1),
    oppositeSignMuons = cms.bool(False),
    MHTdefinition = cms.string('pt > 0'),
    MHTcut = cms.double(-1),
    invMassCutInAllMuPairs = cms.bool(False),
    enablePhotonPlot = cms.bool(False),
    enableMETPlot = cms.bool(False),
    enable2DPlots = cms.bool(True),
    numGenericTriggerEventPSet = cms.PSet(
      ReadPrescalesFromFile = cms.bool(False),
      andOr = cms.bool(False),
      andOrDcs = cms.bool(False),
      andOrHlt = cms.bool(False),
      andOrL1 = cms.bool(False),
      errorReplyDcs = cms.bool(False),
      errorReplyHlt = cms.bool(False),
      errorReplyL1 = cms.bool(False),
      l1BeforeMask = cms.bool(False),
      stage2 = cms.bool(False),
      dcsInputTag = cms.InputTag('scalersRawToDigi'),
      dcsRecordInputTag = cms.InputTag('onlineMetaDataDigis'),
      hltInputTag = cms.InputTag('TriggerResults', '', 'HLT'),
      l1tAlgBlkInputTag = cms.InputTag('gtStage2Digis'),
      l1tExtBlkInputTag = cms.InputTag('gtStage2Digis'),
      dbLabel = cms.string(''),
      hltDBKey = cms.string(''),
      dcsPartitions = cms.vint32(),
      hltPaths = cms.vstring(),
      l1Algorithms = cms.vstring(),
      verbosityLevel = cms.uint32(0)
    ),
    denGenericTriggerEventPSet = cms.PSet(
      ReadPrescalesFromFile = cms.bool(False),
      andOr = cms.bool(False),
      andOrDcs = cms.bool(False),
      andOrHlt = cms.bool(False),
      andOrL1 = cms.bool(False),
      errorReplyDcs = cms.bool(False),
      errorReplyHlt = cms.bool(False),
      errorReplyL1 = cms.bool(False),
      l1BeforeMask = cms.bool(False),
      stage2 = cms.bool(False),
      dcsInputTag = cms.InputTag('scalersRawToDigi'),
      dcsRecordInputTag = cms.InputTag('onlineMetaDataDigis'),
      hltInputTag = cms.InputTag('TriggerResults', '', 'HLT'),
      l1tAlgBlkInputTag = cms.InputTag('gtStage2Digis'),
      l1tExtBlkInputTag = cms.InputTag('gtStage2Digis'),
      dbLabel = cms.string(''),
      hltDBKey = cms.string(''),
      dcsPartitions = cms.vint32(),
      hltPaths = cms.vstring(),
      l1Algorithms = cms.vstring(),
      verbosityLevel = cms.uint32(0)
    ),
    histoPSet = cms.PSet(
      metPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      etaPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      phiPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      ptPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      htPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      DRPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      csvPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      invMassPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      MHTPSet = cms.PSet(
        nbins = cms.required.uint32,
        xmin = cms.required.double,
        xmax = cms.required.double
      ),
      metBinning = cms.vdouble(
        0,
        20,
        40,
        60,
        80,
        90,
        100,
        110,
        120,
        130,
        140,
        150,
        160,
        170,
        180,
        190,
        200,
        220,
        240,
        260,
        280,
        300,
        350,
        400,
        450,
        1000
      ),
      HTBinning = cms.vdouble(
        0,
        20,
        40,
        60,
        80,
        90,
        100,
        110,
        120,
        130,
        140,
        150,
        160,
        170,
        180,
        190,
        200,
        220,
        240,
        260,
        280,
        300,
        350,
        400,
        450,
        1000
      ),
      jetPtBinning = cms.vdouble(
        0,
        20,
        40,
        60,
        80,
        90,
        100,
        110,
        120,
        130,
        140,
        150,
        160,
        170,
        180,
        190,
        200,
        220,
        240,
        260,
        280,
        300,
        350,
        400,
        450,
        1000
      ),
      elePtBinning = cms.vdouble(
        0,
        20,
        40,
        60,
        80,
        90,
        100,
        110,
        120,
        130,
        140,
        150,
        160,
        170,
        180,
        190,
        200,
        220,
        240,
        260,
        280,
        300,
        350,
        400,
        450,
        1000
      ),
      muPtBinning = cms.vdouble(
        0,
        20,
        40,
        60,
        80,
        90,
        100,
        110,
        120,
        130,
        140,
        150,
        160,
        170,
        180,
        190,
        200,
        220,
        240,
        260,
        280,
        300,
        350,
        400,
        450,
        1000
      ),
      jetEtaBinning = cms.vdouble(
        -3,
        -2.5,
        -2,
        -1.5,
        -1,
        -0.5,
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3
      ),
      eleEtaBinning = cms.vdouble(
        -3,
        -2.5,
        -2,
        -1.5,
        -1,
        -0.5,
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3
      ),
      muEtaBinning = cms.vdouble(
        -3,
        -2.5,
        -2,
        -1.5,
        -1,
        -0.5,
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3
      ),
      invMassVariableBinning = cms.vdouble(
        0,
        20,
        40,
        60,
        80,
        90,
        100,
        110,
        120,
        130,
        140,
        150,
        160,
        170,
        180,
        190,
        200,
        220,
        240,
        260,
        280,
        300,
        350,
        400,
        450,
        1000
      ),
      MHTVariableBinning = cms.vdouble(
        0,
        20,
        40,
        60,
        80,
        90,
        100,
        110,
        120,
        130,
        140,
        150,
        160,
        170,
        180,
        190,
        200,
        220,
        240,
        260,
        280,
        300,
        350,
        400,
        450,
        1000
      ),
      HTBinning2D = cms.vdouble(
        0,
        40,
        80,
        100,
        120,
        140,
        160,
        180,
        200,
        240,
        280,
        350,
        450,
        1000
      ),
      jetPtBinning2D = cms.vdouble(
        0,
        40,
        80,
        100,
        120,
        140,
        160,
        180,
        200,
        240,
        280,
        350,
        450,
        1000
      ),
      elePtBinning2D = cms.vdouble(
        0,
        40,
        80,
        100,
        120,
        140,
        160,
        180,
        200,
        240,
        280,
        350,
        450,
        1000
      ),
      muPtBinning2D = cms.vdouble(
        0,
        40,
        80,
        100,
        120,
        140,
        160,
        180,
        200,
        240,
        280,
        350,
        450,
        1000
      ),
      phoPtBinning2D = cms.vdouble(
        0,
        40,
        80,
        100,
        120,
        140,
        160,
        180,
        200,
        240,
        280,
        350,
        450,
        1000
      ),
      jetEtaBinning2D = cms.vdouble(
        -3,
        -2,
        -1,
        0,
        1,
        2,
        3
      ),
      eleEtaBinning2D = cms.vdouble(
        -3,
        -2,
        -1,
        0,
        1,
        2,
        3
      ),
      muEtaBinning2D = cms.vdouble(
        -3,
        -2,
        -1,
        0,
        1,
        2,
        3
      ),
      phoEtaBinning2D = cms.vdouble(
        -3,
        -2,
        -1,
        0,
        1,
        2,
        3
      ),
      phiBinning2D = cms.vdouble(
        -3.1415,
        -2.5132,
        -1.8849,
        -1.2566,
        -0.6283,
        0,
        0.6283,
        1.2566,
        1.8849,
        2.5132,
        3.1415
      ),
      lsPSet = cms.PSet(
        nbins = cms.uint32(2500),
        xmin = cms.double(0),
        xmax = cms.double(2500)
      )
    ),
    leptonPVcuts = cms.PSet(
      dxy = cms.double(9999),
      dz = cms.double(9999)
    ),
    mightGet = cms.optional.untracked.vstring
  )
  for a in args:
    mod.update_(a)
  mod.update_(kwargs)
  return mod
